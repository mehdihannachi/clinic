{"filter":false,"title":"dashboardGoogleAnalytic.js","tooltip":"/views/assets/js/dashboardGoogleAnalytic.js","undoManager":{"mark":20,"position":20,"stack":[[{"start":{"row":0,"column":0},"end":{"row":193,"column":0},"action":"insert","lines":["        <script>","                        gapi.analytics.ready(function() {","","                            /**","                             * Authorize the user immediately if the user has already granted access.","                             * If no access has been created, render an authorize button inside the","                             * element with the ID \"embed-api-auth-container\".","                             */","                            gapi.analytics.auth.authorize({","                                container: 'embed-api-auth-container',","                                clientid: '399059803263-96s52gj2ekorl76qjbhlodc84nmc6fj3.apps.googleusercontent.com'","                            });","","","                            /**","                             * Create a new ViewSelector instance to be rendered inside of an","                             * element with the id \"view-selector-container\".","                             */","                            var viewSelector = new gapi.analytics.ViewSelector({","                                container: 'view-selector-container'","                            });","","                            // Render the view selector to the page.","                            viewSelector.execute();","","","                            /**","                             * Create a new DataChart instance with the given query parameters","                             * and Google chart options. It will be rendered inside an element","                             * with the id \"chart-container\".","                             */","                            var dataChart = new gapi.analytics.googleCharts.DataChart({","                                query: {","                                    metrics: 'ga:sessions',","                                    dimensions: 'ga:date',","                                    'start-date': '30daysAgo',","                                    'end-date': 'yesterday'","                                },","                                chart: {","                                    container: 'chart-container',","                                    type: 'LINE',","                                    options: {","                                        width: '100%'","                                    }","                                }","                            });","","                            /**","                             * Create the first DataChart for top countries over the past 30 days.","                             * It will be rendered inside an element with the id \"chart-1-container\".","                             */","                            var dataChart1 = new gapi.analytics.googleCharts.DataChart({","                                query: {","                                    metrics: 'ga:sessions',","                                    dimensions: 'ga:country',","                                    'start-date': '30daysAgo',","                                    'end-date': 'yesterday',","                                    'max-results': 6,","                                    sort: '-ga:sessions'","                                },","                                chart: {","                                    container: 'chart-1-container',","                                    type: 'PIE',","                                    options: {","                                        width: '100%',","                                        pieHole: 4 / 9","                                    }","                                }","                            });","                            /**","                             * Render the dataChart on the page whenever a new view is selected.","                             */","                            viewSelector.on('change', function(ids) {","                                dataChart.set({","                                    query: {","                                        ids: ids","                                    }","                                }).execute();","                                dataChart1.set({","                                    query: {","                                        ids: ids","                                    }","                                }).execute();","                            });","","","","                            var mainChart = new gapi.analytics.googleCharts.DataChart({","                                query: {","                                    'dimensions': 'ga:browser',","                                    'metrics': 'ga:sessions',","                                    'sort': '-ga:sessions',","                                    'max-results': '6'","                                },","                                chart: {","                                    type: 'TABLE',","                                    container: 'main-chart-container',","                                    options: {","                                        width: '100%'","                                    }","                                }","                            });","","","                            /**","                             * Create a timeline chart showing sessions over time for the browser the","                             * user selected in the main chart.","                             */","                            var breakdownChart = new gapi.analytics.googleCharts.DataChart({","                                query: {","                                    'dimensions': 'ga:date',","                                    'metrics': 'ga:sessions',","                                    'start-date': '7daysAgo',","                                    'end-date': 'yesterday'","                                },","                                chart: {","                                    type: 'LINE',","                                    container: 'breakdown-chart-container',","                                    options: {","                                        width: '100%'","                                    }","                                }","                            });","","","                            /**","                             * Store a refernce to the row click listener variable so it can be","                             * removed later to prevent leaking memory when the chart instance is","                             * replaced.","                             */","                            var mainChartRowClickListener;","","","                            /**","                             * Update both charts whenever the selected view changes.","                             */","                            viewSelector.on('change', function(ids) {","                                var options = {","                                    query: {","                                        ids: ids","                                    }","                                };","","                                // Clean up any event listeners registered on the main chart before","                                // rendering a new one.","                                if (mainChartRowClickListener) {","                                    google.visualization.events.removeListener(mainChartRowClickListener);","                                }","","                                mainChart.set(options).execute();","                                breakdownChart.set(options);","","                                // Only render the breakdown chart if a browser filter has been set.","                                if (breakdownChart.get().query.filters) breakdownChart.execute();","                            });","","","                            /**","                             * Each time the main chart is rendered, add an event listener to it so","                             * that when the user clicks on a row, the line chart is updated with","                             * the data from the browser in the clicked row.","                             */","                            mainChart.on('success', function(response) {","","                                var chart = response.chart;","                                var dataTable = response.dataTable;","","                                // Store a reference to this listener so it can be cleaned up later.","                                mainChartRowClickListener = google.visualization.events","                                    .addListener(chart, 'select', function(event) {","","                                        // When you unselect a row, the \"select\" event still fires","                                        // but the selection is empty. Ignore that case.","                                        if (!chart.getSelection().length) return;","","                                        var row = chart.getSelection()[0].row;","                                        var browser = dataTable.getValue(row, 0);","                                        var options = {","                                            query: {","                                                filters: 'ga:browser==' + browser","                                            },","                                            chart: {","                                                options: {","                                                    title: browser","                                                }","                                            }","                                        };","","                                        breakdownChart.set(options).execute();","                                    });","                            });","                        });","                    </script>",""],"id":1}],[{"start":{"row":192,"column":0},"end":{"row":193,"column":0},"action":"remove","lines":["                    </script>",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":4},"action":"remove","lines":["    "],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":4},"action":"remove","lines":["    "],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["<"],"id":5}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["s"],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["c"],"id":7}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["r"],"id":8}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["i"],"id":9}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["p"],"id":10}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["t"],"id":11}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":[">"],"id":12}],[{"start":{"row":0,"column":0},"end":{"row":191,"column":24},"action":"remove","lines":["","                        gapi.analytics.ready(function() {","","                            /**","                             * Authorize the user immediately if the user has already granted access.","                             * If no access has been created, render an authorize button inside the","                             * element with the ID \"embed-api-auth-container\".","                             */","                            gapi.analytics.auth.authorize({","                                container: 'embed-api-auth-container',","                                clientid: '399059803263-96s52gj2ekorl76qjbhlodc84nmc6fj3.apps.googleusercontent.com'","                            });","","","                            /**","                             * Create a new ViewSelector instance to be rendered inside of an","                             * element with the id \"view-selector-container\".","                             */","                            var viewSelector = new gapi.analytics.ViewSelector({","                                container: 'view-selector-container'","                            });","","                            // Render the view selector to the page.","                            viewSelector.execute();","","","                            /**","                             * Create a new DataChart instance with the given query parameters","                             * and Google chart options. It will be rendered inside an element","                             * with the id \"chart-container\".","                             */","                            var dataChart = new gapi.analytics.googleCharts.DataChart({","                                query: {","                                    metrics: 'ga:sessions',","                                    dimensions: 'ga:date',","                                    'start-date': '30daysAgo',","                                    'end-date': 'yesterday'","                                },","                                chart: {","                                    container: 'chart-container',","                                    type: 'LINE',","                                    options: {","                                        width: '100%'","                                    }","                                }","                            });","","                            /**","                             * Create the first DataChart for top countries over the past 30 days.","                             * It will be rendered inside an element with the id \"chart-1-container\".","                             */","                            var dataChart1 = new gapi.analytics.googleCharts.DataChart({","                                query: {","                                    metrics: 'ga:sessions',","                                    dimensions: 'ga:country',","                                    'start-date': '30daysAgo',","                                    'end-date': 'yesterday',","                                    'max-results': 6,","                                    sort: '-ga:sessions'","                                },","                                chart: {","                                    container: 'chart-1-container',","                                    type: 'PIE',","                                    options: {","                                        width: '100%',","                                        pieHole: 4 / 9","                                    }","                                }","                            });","                            /**","                             * Render the dataChart on the page whenever a new view is selected.","                             */","                            viewSelector.on('change', function(ids) {","                                dataChart.set({","                                    query: {","                                        ids: ids","                                    }","                                }).execute();","                                dataChart1.set({","                                    query: {","                                        ids: ids","                                    }","                                }).execute();","                            });","","","","                            var mainChart = new gapi.analytics.googleCharts.DataChart({","                                query: {","                                    'dimensions': 'ga:browser',","                                    'metrics': 'ga:sessions',","                                    'sort': '-ga:sessions',","                                    'max-results': '6'","                                },","                                chart: {","                                    type: 'TABLE',","                                    container: 'main-chart-container',","                                    options: {","                                        width: '100%'","                                    }","                                }","                            });","","","                            /**","                             * Create a timeline chart showing sessions over time for the browser the","                             * user selected in the main chart.","                             */","                            var breakdownChart = new gapi.analytics.googleCharts.DataChart({","                                query: {","                                    'dimensions': 'ga:date',","                                    'metrics': 'ga:sessions',","                                    'start-date': '7daysAgo',","                                    'end-date': 'yesterday'","                                },","                                chart: {","                                    type: 'LINE',","                                    container: 'breakdown-chart-container',","                                    options: {","                                        width: '100%'","                                    }","                                }","                            });","","","                            /**","                             * Store a refernce to the row click listener variable so it can be","                             * removed later to prevent leaking memory when the chart instance is","                             * replaced.","                             */","                            var mainChartRowClickListener;","","","                            /**","                             * Update both charts whenever the selected view changes.","                             */","                            viewSelector.on('change', function(ids) {","                                var options = {","                                    query: {","                                        ids: ids","                                    }","                                };","","                                // Clean up any event listeners registered on the main chart before","                                // rendering a new one.","                                if (mainChartRowClickListener) {","                                    google.visualization.events.removeListener(mainChartRowClickListener);","                                }","","                                mainChart.set(options).execute();","                                breakdownChart.set(options);","","                                // Only render the breakdown chart if a browser filter has been set.","                                if (breakdownChart.get().query.filters) breakdownChart.execute();","                            });","","","                            /**","                             * Each time the main chart is rendered, add an event listener to it so","                             * that when the user clicks on a row, the line chart is updated with","                             * the data from the browser in the clicked row.","                             */","                            mainChart.on('success', function(response) {","","                                var chart = response.chart;","                                var dataTable = response.dataTable;","","                                // Store a reference to this listener so it can be cleaned up later.","                                mainChartRowClickListener = google.visualization.events","                                    .addListener(chart, 'select', function(event) {","","                                        // When you unselect a row, the \"select\" event still fires","                                        // but the selection is empty. Ignore that case.","                                        if (!chart.getSelection().length) return;","","                                        var row = chart.getSelection()[0].row;","                                        var browser = dataTable.getValue(row, 0);","                                        var options = {","                                            query: {","                                                filters: 'ga:browser==' + browser","                                            },","                                            chart: {","                                                options: {","                                                    title: browser","                                                }","                                            }","                                        };","","                                        breakdownChart.set(options).execute();","                                    });","                            });","                        "],"id":13},{"start":{"row":0,"column":0},"end":{"row":190,"column":0},"action":"insert","lines":["gapi.analytics.ready(function() {","","    /**","     * Authorize the user immediately if the user has already granted access.","     * If no access has been created, render an authorize button inside the","     * element with the ID \"embed-api-auth-container\".","     */","    gapi.analytics.auth.authorize({","        container: 'embed-api-auth-container',","        clientid: '399059803263-96s52gj2ekorl76qjbhlodc84nmc6fj3.apps.googleusercontent.com'","    });","","","    /**","     * Create a new ViewSelector instance to be rendered inside of an","     * element with the id \"view-selector-container\".","     */","    var viewSelector = new gapi.analytics.ViewSelector({","        container: 'view-selector-container'","    });","","    // Render the view selector to the page.","    viewSelector.execute();","","","    /**","     * Create a new DataChart instance with the given query parameters","     * and Google chart options. It will be rendered inside an element","     * with the id \"chart-container\".","     */","    var dataChart = new gapi.analytics.googleCharts.DataChart({","        query: {","            metrics: 'ga:sessions',","            dimensions: 'ga:date',","            'start-date': '30daysAgo',","            'end-date': 'yesterday'","        },","        chart: {","            container: 'chart-container',","            type: 'LINE',","            options: {","                width: '100%'","            }","        }","    });","","    /**","     * Create the first DataChart for top countries over the past 30 days.","     * It will be rendered inside an element with the id \"chart-1-container\".","     */","    var dataChart1 = new gapi.analytics.googleCharts.DataChart({","        query: {","            metrics: 'ga:sessions',","            dimensions: 'ga:country',","            'start-date': '30daysAgo',","            'end-date': 'yesterday',","            'max-results': 6,","            sort: '-ga:sessions'","        },","        chart: {","            container: 'chart-1-container',","            type: 'PIE',","            options: {","                width: '100%',","                pieHole: 4 / 9","            }","        }","    });","    /**","     * Render the dataChart on the page whenever a new view is selected.","     */","    viewSelector.on('change', function(ids) {","        dataChart.set({","            query: {","                ids: ids","            }","        }).execute();","        dataChart1.set({","            query: {","                ids: ids","            }","        }).execute();","    });","","","","    var mainChart = new gapi.analytics.googleCharts.DataChart({","        query: {","            'dimensions': 'ga:browser',","            'metrics': 'ga:sessions',","            'sort': '-ga:sessions',","            'max-results': '6'","        },","        chart: {","            type: 'TABLE',","            container: 'main-chart-container',","            options: {","                width: '100%'","            }","        }","    });","","","    /**","     * Create a timeline chart showing sessions over time for the browser the","     * user selected in the main chart.","     */","    var breakdownChart = new gapi.analytics.googleCharts.DataChart({","        query: {","            'dimensions': 'ga:date',","            'metrics': 'ga:sessions',","            'start-date': '7daysAgo',","            'end-date': 'yesterday'","        },","        chart: {","            type: 'LINE',","            container: 'breakdown-chart-container',","            options: {","                width: '100%'","            }","        }","    });","","","    /**","     * Store a refernce to the row click listener variable so it can be","     * removed later to prevent leaking memory when the chart instance is","     * replaced.","     */","    var mainChartRowClickListener;","","","    /**","     * Update both charts whenever the selected view changes.","     */","    viewSelector.on('change', function(ids) {","        var options = {","            query: {","                ids: ids","            }","        };","","        // Clean up any event listeners registered on the main chart before","        // rendering a new one.","        if (mainChartRowClickListener) {","            google.visualization.events.removeListener(mainChartRowClickListener);","        }","","        mainChart.set(options).execute();","        breakdownChart.set(options);","","        // Only render the breakdown chart if a browser filter has been set.","        if (breakdownChart.get().query.filters) breakdownChart.execute();","    });","","","    /**","     * Each time the main chart is rendered, add an event listener to it so","     * that when the user clicks on a row, the line chart is updated with","     * the data from the browser in the clicked row.","     */","    mainChart.on('success', function(response) {","","        var chart = response.chart;","        var dataTable = response.dataTable;","","        // Store a reference to this listener so it can be cleaned up later.","        mainChartRowClickListener = google.visualization.events","            .addListener(chart, 'select', function(event) {","","                // When you unselect a row, the \"select\" event still fires","                // but the selection is empty. Ignore that case.","                if (!chart.getSelection().length) return;","","                var row = chart.getSelection()[0].row;","                var browser = dataTable.getValue(row, 0);","                var options = {","                    query: {","                        filters: 'ga:browser==' + browser","                    },","                    chart: {","                        options: {","                            title: browser","                        }","                    }","                };","","                breakdownChart.set(options).execute();","            });","    });",""]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":14}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":15}],[{"start":{"row":0,"column":0},"end":{"row":359,"column":0},"action":"insert","lines":["// == NOTE ==","// This code uses ES6 promises. If you want to use this code in a browser","// that doesn't supporting promises natively, you'll have to include a polyfill.","","gapi.analytics.ready(function() {","","    /**","     * Authorize the user immediately if the user has already granted access.","     * If no access has been created, render an authorize button inside the","     * element with the ID \"embed-api-auth-container\".","     */","    gapi.analytics.auth.authorize({","        container: 'embed-api-auth-container',","        clientid: '399059803263-96s52gj2ekorl76qjbhlodc84nmc6fj3.apps.googleusercontent.com'","    });","","","    /**","     * Create a new ActiveUsers instance to be rendered inside of an","     * element with the id \"active-users-container\" and poll for changes every","     * five seconds.","     */","    var activeUsers = new gapi.analytics.ext.ActiveUsers({","        container: 'active-users-container',","        pollingInterval: 5","    });","","","    /**","     * Add CSS animation to visually show the when users come and go.","     */","    activeUsers.once('success', function() {","        var element = this.container.firstChild;","        var timeout;","","        this.on('change', function(data) {","            var element = this.container.firstChild;","            var animationClass = data.delta > 0 ? 'is-increasing' : 'is-decreasing';","            element.className += (' ' + animationClass);","","            clearTimeout(timeout);","            timeout = setTimeout(function() {","                element.className =","                    element.className.replace(/ is-(increasing|decreasing)/g, '');","            }, 3000);","        });","    });","","","    /**","     * Create a new ViewSelector2 instance to be rendered inside of an","     * element with the id \"view-selector-container\".","     */","    var viewSelector = new gapi.analytics.ext.ViewSelector2({","            container: 'view-selector-container',","        })","        .execute();","","","    /**","     * Update the activeUsers component, the Chartjs charts, and the dashboard","     * title whenever the user changes the view.","     */","    viewSelector.on('viewChange', function(data) {","        var title = document.getElementById('view-name');","        title.textContent = data.property.name + ' (' + data.view.name + ')';","","        // Start tracking active users for this view.","        activeUsers.set(data).execute();","","        // Render all the of charts for this view.","        renderWeekOverWeekChart(data.ids);","        renderYearOverYearChart(data.ids);","        renderTopBrowsersChart(data.ids);","        renderTopCountriesChart(data.ids);","    });","","","    /**","     * Draw the a chart.js line chart with data from the specified view that","     * overlays session data for the current week over session data for the","     * previous week.","     */","    function renderWeekOverWeekChart(ids) {","","        // Adjust `now` to experiment with different days, for testing only...","        var now = moment(); // .subtract(3, 'day');","","        var thisWeek = query({","            'ids': ids,","            'dimensions': 'ga:date,ga:nthDay',","            'metrics': 'ga:sessions',","            'start-date': moment(now).subtract(1, 'day').day(0).format('YYYY-MM-DD'),","            'end-date': moment(now).format('YYYY-MM-DD')","        });","","        var lastWeek = query({","            'ids': ids,","            'dimensions': 'ga:date,ga:nthDay',","            'metrics': 'ga:sessions',","            'start-date': moment(now).subtract(1, 'day').day(0).subtract(1, 'week')","                .format('YYYY-MM-DD'),","            'end-date': moment(now).subtract(1, 'day').day(6).subtract(1, 'week')","                .format('YYYY-MM-DD')","        });","","        Promise.all([thisWeek, lastWeek]).then(function(results) {","","            var data1 = results[0].rows.map(function(row) {","                return +row[2];","            });","            var data2 = results[1].rows.map(function(row) {","                return +row[2];","            });","            var labels = results[1].rows.map(function(row) {","                return +row[0];","            });","","            labels = labels.map(function(label) {","                return moment(label, 'YYYYMMDD').format('ddd');","            });","","            var data = {","                labels: labels,","                datasets: [{","                    label: 'Last Week',","                    fillColor: 'rgba(220,220,220,0.5)',","                    strokeColor: 'rgba(220,220,220,1)',","                    pointColor: 'rgba(220,220,220,1)',","                    pointStrokeColor: '#fff',","                    data: data2","                }, {","                    label: 'This Week',","                    fillColor: 'rgba(151,187,205,0.5)',","                    strokeColor: 'rgba(151,187,205,1)',","                    pointColor: 'rgba(151,187,205,1)',","                    pointStrokeColor: '#fff',","                    data: data1","                }]","            };","","            new Chart(makeCanvas('chart-1-container')).Line(data);","            generateLegend('legend-1-container', data.datasets);","        });","    }","","","    /**","     * Draw the a chart.js bar chart with data from the specified view that","     * overlays session data for the current year over session data for the","     * previous year, grouped by month.","     */","    function renderYearOverYearChart(ids) {","","        // Adjust `now` to experiment with different days, for testing only...","        var now = moment(); // .subtract(3, 'day');","","        var thisYear = query({","            'ids': ids,","            'dimensions': 'ga:month,ga:nthMonth',","            'metrics': 'ga:users',","            'start-date': moment(now).date(1).month(0).format('YYYY-MM-DD'),","            'end-date': moment(now).format('YYYY-MM-DD')","        });","","        var lastYear = query({","            'ids': ids,","            'dimensions': 'ga:month,ga:nthMonth',","            'metrics': 'ga:users',","            'start-date': moment(now).subtract(1, 'year').date(1).month(0)","                .format('YYYY-MM-DD'),","            'end-date': moment(now).date(1).month(0).subtract(1, 'day')","                .format('YYYY-MM-DD')","        });","","        Promise.all([thisYear, lastYear]).then(function(results) {","                var data1 = results[0].rows.map(function(row) {","                    return +row[2];","                });","                var data2 = results[1].rows.map(function(row) {","                    return +row[2];","                });","                var labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',","                    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'","                ];","","                // Ensure the data arrays are at least as long as the labels array.","                // Chart.js bar charts don't (yet) accept sparse datasets.","                for (var i = 0, len = labels.length; i < len; i++) {","                    if (data1[i] === undefined) data1[i] = null;","                    if (data2[i] === undefined) data2[i] = null;","                }","","                var data = {","                    labels: labels,","                    datasets: [{","                        label: 'Last Year',","                        fillColor: 'rgba(220,220,220,0.5)',","                        strokeColor: 'rgba(220,220,220,1)',","                        data: data2","                    }, {","                        label: 'This Year',","                        fillColor: 'rgba(151,187,205,0.5)',","                        strokeColor: 'rgba(151,187,205,1)',","                        data: data1","                    }]","                };","","                new Chart(makeCanvas('chart-2-container')).Bar(data);","                generateLegend('legend-2-container', data.datasets);","            })","            .catch(function(err) {","                console.error(err.stack);","            });","    }","","","    /**","     * Draw the a chart.js doughnut chart with data from the specified view that","     * show the top 5 browsers over the past seven days.","     */","    function renderTopBrowsersChart(ids) {","","        query({","                'ids': ids,","                'dimensions': 'ga:browser',","                'metrics': 'ga:pageviews',","                'sort': '-ga:pageviews',","                'max-results': 5","            })","            .then(function(response) {","","                var data = [];","                var colors = ['#4D5360', '#949FB1', '#D4CCC5', '#E2EAE9', '#F7464A'];","","                response.rows.forEach(function(row, i) {","                    data.push({","                        value: +row[1],","                        color: colors[i],","                        label: row[0]","                    });","                });","","                new Chart(makeCanvas('chart-3-container')).Doughnut(data);","                generateLegend('legend-3-container', data);","            });","    }","","","    /**","     * Draw the a chart.js doughnut chart with data from the specified view that","     * compares sessions from mobile, desktop, and tablet over the past seven","     * days.","     */","    function renderTopCountriesChart(ids) {","        query({","                'ids': ids,","                'dimensions': 'ga:country',","                'metrics': 'ga:sessions',","                'sort': '-ga:sessions',","                'max-results': 5","            })","            .then(function(response) {","","                var data = [];","                var colors = ['#4D5360', '#949FB1', '#D4CCC5', '#E2EAE9', '#F7464A'];","","                response.rows.forEach(function(row, i) {","                    data.push({","                        label: row[0],","                        value: +row[1],","                        color: colors[i]","                    });","                });","","                new Chart(makeCanvas('chart-4-container')).Doughnut(data);","                generateLegend('legend-4-container', data);","            });","    }","","","    /**","     * Extend the Embed APIs `gapi.analytics.report.Data` component to","     * return a promise the is fulfilled with the value returned by the API.","     * @param {Object} params The request parameters.","     * @return {Promise} A promise.","     */","    function query(params) {","        return new Promise(function(resolve, reject) {","            var data = new gapi.analytics.report.Data({","                query: params","            });","            data.once('success', function(response) {","                    resolve(response);","                })","                .once('error', function(response) {","                    reject(response);","                })","                .execute();","        });","    }","","","    /**","     * Create a new canvas inside the specified element. Set it to be the width","     * and height of its container.","     * @param {string} id The id attribute of the element to host the canvas.","     * @return {RenderingContext} The 2D canvas context.","     */","    function makeCanvas(id) {","        var container = document.getElementById(id);","        var canvas = document.createElement('canvas');","        var ctx = canvas.getContext('2d');","","        container.innerHTML = '';","        canvas.width = container.offsetWidth;","        canvas.height = container.offsetHeight;","        container.appendChild(canvas);","","        return ctx;","    }","","","    /**","     * Create a visual legend inside the specified element based off of a","     * Chart.js dataset.","     * @param {string} id The id attribute of the element to host the legend.","     * @param {Array.<Object>} items A list of labels and colors for the legend.","     */","    function generateLegend(id, items) {","        var legend = document.getElementById(id);","        legend.innerHTML = items.map(function(item) {","            var color = item.color || item.fillColor;","            var label = item.label;","            return '<li><i style=\"background:' + color + '\"></i>' +","                escapeHtml(label) + '</li>';","        }).join('');","    }","","","    // Set some global Chart.js defaults.","    Chart.defaults.global.animationSteps = 60;","    Chart.defaults.global.animationEasing = 'easeInOutQuart';","    Chart.defaults.global.responsive = true;","    Chart.defaults.global.maintainAspectRatio = false;","","","    /**","     * Escapes a potentially unsafe HTML string.","     * @param {string} str An string that may contain HTML entities.","     * @return {string} The HTML-escaped string.","     */","    function escapeHtml(str) {","        var div = document.createElement('div');","        div.appendChild(document.createTextNode(str));","        return div.innerHTML;","    }","","});",""],"id":16}],[{"start":{"row":359,"column":0},"end":{"row":552,"column":0},"action":"remove","lines":["","","gapi.analytics.ready(function() {","","    /**","     * Authorize the user immediately if the user has already granted access.","     * If no access has been created, render an authorize button inside the","     * element with the ID \"embed-api-auth-container\".","     */","    gapi.analytics.auth.authorize({","        container: 'embed-api-auth-container',","        clientid: '399059803263-96s52gj2ekorl76qjbhlodc84nmc6fj3.apps.googleusercontent.com'","    });","","","    /**","     * Create a new ViewSelector instance to be rendered inside of an","     * element with the id \"view-selector-container\".","     */","    var viewSelector = new gapi.analytics.ViewSelector({","        container: 'view-selector-container'","    });","","    // Render the view selector to the page.","    viewSelector.execute();","","","    /**","     * Create a new DataChart instance with the given query parameters","     * and Google chart options. It will be rendered inside an element","     * with the id \"chart-container\".","     */","    var dataChart = new gapi.analytics.googleCharts.DataChart({","        query: {","            metrics: 'ga:sessions',","            dimensions: 'ga:date',","            'start-date': '30daysAgo',","            'end-date': 'yesterday'","        },","        chart: {","            container: 'chart-container',","            type: 'LINE',","            options: {","                width: '100%'","            }","        }","    });","","    /**","     * Create the first DataChart for top countries over the past 30 days.","     * It will be rendered inside an element with the id \"chart-1-container\".","     */","    var dataChart1 = new gapi.analytics.googleCharts.DataChart({","        query: {","            metrics: 'ga:sessions',","            dimensions: 'ga:country',","            'start-date': '30daysAgo',","            'end-date': 'yesterday',","            'max-results': 6,","            sort: '-ga:sessions'","        },","        chart: {","            container: 'chart-1-container',","            type: 'PIE',","            options: {","                width: '100%',","                pieHole: 4 / 9","            }","        }","    });","    /**","     * Render the dataChart on the page whenever a new view is selected.","     */","    viewSelector.on('change', function(ids) {","        dataChart.set({","            query: {","                ids: ids","            }","        }).execute();","        dataChart1.set({","            query: {","                ids: ids","            }","        }).execute();","    });","","","","    var mainChart = new gapi.analytics.googleCharts.DataChart({","        query: {","            'dimensions': 'ga:browser',","            'metrics': 'ga:sessions',","            'sort': '-ga:sessions',","            'max-results': '6'","        },","        chart: {","            type: 'TABLE',","            container: 'main-chart-container',","            options: {","                width: '100%'","            }","        }","    });","","","    /**","     * Create a timeline chart showing sessions over time for the browser the","     * user selected in the main chart.","     */","    var breakdownChart = new gapi.analytics.googleCharts.DataChart({","        query: {","            'dimensions': 'ga:date',","            'metrics': 'ga:sessions',","            'start-date': '7daysAgo',","            'end-date': 'yesterday'","        },","        chart: {","            type: 'LINE',","            container: 'breakdown-chart-container',","            options: {","                width: '100%'","            }","        }","    });","","","    /**","     * Store a refernce to the row click listener variable so it can be","     * removed later to prevent leaking memory when the chart instance is","     * replaced.","     */","    var mainChartRowClickListener;","","","    /**","     * Update both charts whenever the selected view changes.","     */","    viewSelector.on('change', function(ids) {","        var options = {","            query: {","                ids: ids","            }","        };","","        // Clean up any event listeners registered on the main chart before","        // rendering a new one.","        if (mainChartRowClickListener) {","            google.visualization.events.removeListener(mainChartRowClickListener);","        }","","        mainChart.set(options).execute();","        breakdownChart.set(options);","","        // Only render the breakdown chart if a browser filter has been set.","        if (breakdownChart.get().query.filters) breakdownChart.execute();","    });","","","    /**","     * Each time the main chart is rendered, add an event listener to it so","     * that when the user clicks on a row, the line chart is updated with","     * the data from the browser in the clicked row.","     */","    mainChart.on('success', function(response) {","","        var chart = response.chart;","        var dataTable = response.dataTable;","","        // Store a reference to this listener so it can be cleaned up later.","        mainChartRowClickListener = google.visualization.events","            .addListener(chart, 'select', function(event) {","","                // When you unselect a row, the \"select\" event still fires","                // but the selection is empty. Ignore that case.","                if (!chart.getSelection().length) return;","","                var row = chart.getSelection()[0].row;","                var browser = dataTable.getValue(row, 0);","                var options = {","                    query: {","                        filters: 'ga:browser==' + browser","                    },","                    chart: {","                        options: {","                            title: browser","                        }","                    }","                };","","                breakdownChart.set(options).execute();","            });","    });","});",""],"id":17}],[{"start":{"row":141,"column":41},"end":{"row":141,"column":42},"action":"remove","lines":["-"],"id":18}],[{"start":{"row":141,"column":40},"end":{"row":141,"column":41},"action":"remove","lines":["1"],"id":19}],[{"start":{"row":142,"column":36},"end":{"row":142,"column":37},"action":"remove","lines":["-"],"id":20}],[{"start":{"row":142,"column":35},"end":{"row":142,"column":36},"action":"remove","lines":["1"],"id":21}],[{"start":{"row":198,"column":4},"end":{"row":198,"column":7},"action":"insert","lines":["// "],"id":28},{"start":{"row":199,"column":4},"end":{"row":199,"column":7},"action":"insert","lines":["// "]},{"start":{"row":200,"column":4},"end":{"row":200,"column":7},"action":"insert","lines":["// "]},{"start":{"row":201,"column":4},"end":{"row":201,"column":7},"action":"insert","lines":["// "]},{"start":{"row":204,"column":4},"end":{"row":204,"column":7},"action":"insert","lines":["// "]},{"start":{"row":205,"column":4},"end":{"row":205,"column":7},"action":"insert","lines":["// "]},{"start":{"row":206,"column":4},"end":{"row":206,"column":7},"action":"insert","lines":["// "]},{"start":{"row":207,"column":4},"end":{"row":207,"column":7},"action":"insert","lines":["// "]},{"start":{"row":208,"column":4},"end":{"row":208,"column":7},"action":"insert","lines":["// "]},{"start":{"row":209,"column":4},"end":{"row":209,"column":7},"action":"insert","lines":["// "]},{"start":{"row":211,"column":4},"end":{"row":211,"column":7},"action":"insert","lines":["// "]},{"start":{"row":212,"column":4},"end":{"row":212,"column":7},"action":"insert","lines":["// "]},{"start":{"row":213,"column":4},"end":{"row":213,"column":7},"action":"insert","lines":["// "]},{"start":{"row":214,"column":4},"end":{"row":214,"column":7},"action":"insert","lines":["// "]},{"start":{"row":216,"column":4},"end":{"row":216,"column":7},"action":"insert","lines":["// "]},{"start":{"row":217,"column":4},"end":{"row":217,"column":7},"action":"insert","lines":["// "]},{"start":{"row":218,"column":4},"end":{"row":218,"column":7},"action":"insert","lines":["// "]},{"start":{"row":219,"column":4},"end":{"row":219,"column":7},"action":"insert","lines":["// "]},{"start":{"row":220,"column":4},"end":{"row":220,"column":7},"action":"insert","lines":["// "]},{"start":{"row":221,"column":4},"end":{"row":221,"column":7},"action":"insert","lines":["// "]},{"start":{"row":222,"column":4},"end":{"row":222,"column":7},"action":"insert","lines":["// "]}],[{"start":{"row":104,"column":0},"end":{"row":105,"column":0},"action":"remove","lines":["",""],"id":27}],[{"start":{"row":16,"column":3},"end":{"row":16,"column":4},"action":"insert","lines":[" "],"id":26}],[{"start":{"row":16,"column":0},"end":{"row":192,"column":7},"action":"insert","lines":["   /**","     * Create a new ViewSelector instance to be rendered inside of an","     * element with the id \"view-selector-container\".","     */","    var viewSelector = new gapi.analytics.ViewSelector({","        container: 'view-selector-container'","    });","","    // Render the view selector to the page.","    viewSelector.execute();","","","    /**","     * Create a new DataChart instance with the given query parameters","     * and Google chart options. It will be rendered inside an element","     * with the id \"chart-container\".","     */","    var dataChart = new gapi.analytics.googleCharts.DataChart({","        query: {","            metrics: 'ga:sessions',","            dimensions: 'ga:date',","            'start-date': '30daysAgo',","            'end-date': 'yesterday'","        },","        chart: {","            container: 'chart-container',","            type: 'LINE',","            options: {","                width: '100%'","            }","        }","    });","","    /**","     * Create the first DataChart for top countries over the past 30 days.","     * It will be rendered inside an element with the id \"chart-1-container\".","     */","    var dataChart1 = new gapi.analytics.googleCharts.DataChart({","        query: {","            metrics: 'ga:sessions',","            dimensions: 'ga:country',","            'start-date': '30daysAgo',","            'end-date': 'yesterday',","            'max-results': 6,","            sort: '-ga:sessions'","        },","        chart: {","            container: 'chart-1-container',","            type: 'PIE',","            options: {","                width: '100%',","                pieHole: 4 / 9","            }","        }","    });","    /**","     * Render the dataChart on the page whenever a new view is selected.","     */","    viewSelector.on('change', function(ids) {","        dataChart.set({","            query: {","                ids: ids","            }","        }).execute();","        dataChart1.set({","            query: {","                ids: ids","            }","        }).execute();","    });","","","","    var mainChart = new gapi.analytics.googleCharts.DataChart({","        query: {","            'dimensions': 'ga:browser',","            'metrics': 'ga:sessions',","            'sort': '-ga:sessions',","            'max-results': '6'","        },","        chart: {","            type: 'TABLE',","            container: 'main-chart-container',","            options: {","                width: '100%'","            }","        }","    });","","","    /**","     * Create a timeline chart showing sessions over time for the browser the","     * user selected in the main chart.","     */","    var breakdownChart = new gapi.analytics.googleCharts.DataChart({","        query: {","            'dimensions': 'ga:date',","            'metrics': 'ga:sessions',","            'start-date': '7daysAgo',","            'end-date': 'yesterday'","        },","        chart: {","            type: 'LINE',","            container: 'breakdown-chart-container',","            options: {","                width: '100%'","            }","        }","    });","","","    /**","     * Store a refernce to the row click listener variable so it can be","     * removed later to prevent leaking memory when the chart instance is","     * replaced.","     */","    var mainChartRowClickListener;","","","    /**","     * Update both charts whenever the selected view changes.","     */","    viewSelector.on('change', function(ids) {","        var options = {","            query: {","                ids: ids","            }","        };","","        // Clean up any event listeners registered on the main chart before","        // rendering a new one.","        if (mainChartRowClickListener) {","            google.visualization.events.removeListener(mainChartRowClickListener);","        }","","        mainChart.set(options).execute();","        breakdownChart.set(options);","","        // Only render the breakdown chart if a browser filter has been set.","        if (breakdownChart.get().query.filters) breakdownChart.execute();","    });","","","    /**","     * Each time the main chart is rendered, add an event listener to it so","     * that when the user clicks on a row, the line chart is updated with","     * the data from the browser in the clicked row.","     */","    mainChart.on('success', function(response) {","","        var chart = response.chart;","        var dataTable = response.dataTable;","","        // Store a reference to this listener so it can be cleaned up later.","        mainChartRowClickListener = google.visualization.events","            .addListener(chart, 'select', function(event) {","","                // When you unselect a row, the \"select\" event still fires","                // but the selection is empty. Ignore that case.","                if (!chart.getSelection().length) return;","","                var row = chart.getSelection()[0].row;","                var browser = dataTable.getValue(row, 0);","                var options = {","                    query: {","                        filters: 'ga:browser==' + browser","                    },","                    chart: {","                        options: {","                            title: browser","                        }","                    }","                };","","                breakdownChart.set(options).execute();","            });","    });"],"id":25}],[{"start":{"row":15,"column":0},"end":{"row":16,"column":0},"action":"insert","lines":["",""],"id":24}]]},"ace":{"folds":[],"scrolltop":2.5,"scrollleft":0,"selection":{"start":{"row":23,"column":44},"end":{"row":23,"column":44},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"9438f58b267f77f7be2415a32eef67e1536ca4df","timestamp":1499276327913}