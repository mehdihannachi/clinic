{"changed":true,"filter":false,"title":"authentication.js","tooltip":"/app/controllers/authentication.js","value":"var async = require('async'),\n    moment = require('moment'),\n    _jsy = require('jsy'),\n    hospital = require('./../models/hospital'),\n    file = require('./../models/file'),\n    appConfig = require('./../../config/app.js'),\n    // speciality = require('./../models/speciality'),\n    mongoose = require('mongoose'),\n    ObjectId = require('mongoose').Types.ObjectId,\n    mailer = require('./../models/mailer'),\n    userprofile = require('./../models/patient'),\n    // procedureMedical = require('./../models/procedureMedical'),\n    User = require('./../models/user'),\n    usertype = require('./../models/usertype'),\n    resetpasswordhash = require('./../models/resetpasswordhash'),\n    // medecinController = require('./../controllers/medecinController'),\n    factory = require('./../libs/factory'),\n    shortid = require('shortid'),\n    isEqual = require('lodash.isequal'),\n    moment = require('moment'),\n    _ = require(\"underscore\");\n\n\n// show all hospitals -- with filter --\nmodule.exports.get_hospitals = function(req, res) {\n    console.log(\"get_hospitals*********\")\n    var country = req.body.country;\n    var speciality = req.body.speciality;\n\n    console.log('req.body.country')\n    console.log(country)\n    console.log('req.body.speciality')\n    console.log(speciality)\n    var query\n    var query2\n    if ((!country && !speciality) || (country == \"all\" && speciality == \"all\") || (!country && speciality == \"all\") || (!speciality && country == \"all\"))\n        query = hospital.find({});\n    else if (country && country != \"all\" && (!speciality || speciality == \"all\"))\n        query = hospital.find({\n            country: mongoose.Types.ObjectId(country)\n        })\n    else if (speciality && speciality != \"all\" && (!country || country == \"all\")) {\n        query = hospital.find({\n            'procedureMedical.speciality': mongoose.Types.ObjectId(speciality)\n        });\n    }\n    else {\n        query = hospital.find({\n            $and: [{\n                country: mongoose.Types.ObjectId(country)\n            }, {\n                'procedureMedical.speciality': mongoose.Types.ObjectId(speciality)\n            }]\n        })\n    }\n    if (query) {\n        query.populate('city');\n        query.populate('country');\n        query.populate('procedureMedical');\n        query.select().exec(function(err, data) {\n            if (err) {\n                console.log(\"err\")\n                console.log(err)\n                res.json({\n                    error: true\n                })\n            }\n            else {\n                var newdata = [{}]\n                if (data.length != 0) {\n                    for (var i = 0; i < data.length; i++) {\n                        console.log(\"enterereereerererer\")\n                        var hosp = data[i].toObject();\n                        if (hosp.procedureMedical.length != 0) {\n                            var tabmax = []\n                            var tabmin = []\n                            for (var j = 0; j < hosp.procedureMedical.length; j++) {\n                                tabmin[j] = hosp.procedureMedical[j].price_min\n                                tabmax[j] = hosp.procedureMedical[j].price_max\n                            }\n                            var pmin = tabmin[0]\n                            var pmax = tabmax[0]\n                            for (var k = 0; k < tabmin.length; k++) {\n                                if (tabmin[k] <= pmin) {\n                                    hosp.procedureMedical._price_min = tabmin[k]\n                                }\n                            }\n                            for (var x = 0; x < tabmax.length; x++) {\n                                if (tabmax[x] >= pmax) {\n                                    hosp.procedureMedical._price_max = tabmax[x]\n                                }\n                            }\n                            console.log(\" hosp.procedureMedical._price_min\")\n                            console.log(hosp.procedureMedical._price_min)\n                            console.log(\" hosp.procedureMedical._price_max\")\n                            console.log(hosp.procedureMedical._price_max)\n                            hosp.braces = hosp.procedureMedical._price_min\n                            hosp.crown = hosp.procedureMedical._price_max\n                        }\n                        newdata[i] = hosp\n                    }\n                    console.log(\"hosp \" + i + \" ---------------------------------------------------\")\n                    console.log(data.length)\n                    return res.json({\n                        error: false,\n                        hospitals: newdata\n                    });\n                }\n                else {\n                    return res.json({\n                        error: false\n                    });\n                }\n            }\n        })\n    }\n}\n// get profil hospital \nmodule.exports.gethospital = function(req, res) {\n    console.log('req.params.id')\n    console.log(req.params.id)\n\n    var data = {};\n    var images = {};\n    async.series([\n        function(next) {\n            hospital.findOne({\n                _id: req.params.id\n            }, function(err, hosp) {\n                data = hosp;\n                console.log('hospital')\n                console.log(data)\n                if (!err)\n                    next();\n                else\n                    console.error(err)\n            }).populate('country').populate('city').populate('procedureMedical.speciality').populate('procedureMedical.procedure').populate('doctors').populate('services');\n        },\n        function(next) {\n            console.log(\"data\")\n            console.log(data)\n            file.find({\n                user_id: req.params.id\n            }, function(err, img) {\n                images = img;\n                console.log('img')\n                console.log(images)\n                if (!err)\n                    next();\n                else\n                    console.error(err)\n            });\n        },\n        function(next) {\n\n            res.render('hospital/profileHospital.ejs', {\n                user: req.user,\n                hospital: data,\n                images: images\n            });\n\n        }\n\n\n\n\n\n    ])\n}\nmodule.exports.load = function(req, res) {\n\n    var data = {};\n    async.series([\n        function(next) {\n\n            if (req.user) {\n                console.log(\"req.user.type \")\n                console.log(req.user.type)\n                if (req.user.type == 1) {\n                    res.render('patient/inbox.ejs', {\n                        user: req.user\n                    });\n                }\n                else if (req.user.type == 0) {\n\n                    res.render('hospital/inbox.ejs', {\n                        user: req.user\n                    });\n                }\n            }\n            else\n                res.render('guest/index.ejs', {\n                    user: req.user\n                });\n        }\n    ]);\n\n}\n// forgot password\nmodule.exports.forgotpasswordPOSTajax = function(req, res) {\n\n    User.findOne({\n        \"local.email\": req.body.email\n    }, function(err, user) {\n        if (user) {\n            console.log(user);\n            var hash = shortid.generate();\n            resetpasswordhash.create({\n                user_id: user._id,\n                hash: hash\n            }, function(err, _hash) {\n                if (err) return handleError(err);\n                else\n                    console.log(_hash)\n                var reset_link = \"http://\" + appConfig.domain + \"/password_reset/\" + hash\n                mailer({\n                    template: \"lostPassword\",\n                    footer: true,\n                    to: user.local.email,\n                    subject: \"Mots de passe oubli√© - Careways.Co\",\n                    vars: {\n                        reset_link: reset_link\n                    }\n                });\n\n                // saved!\n            });\n\n            res.json({\n                error: false\n            })\n        }\n        else {\n\n            res.json({\n                error: true,\n                message: \"Email address not found\"\n            })\n        }\n    });\n}\n","undoManager":{"mark":6,"position":8,"stack":[[{"start":{"row":0,"column":0},"end":{"row":2,"column":34},"action":"insert","lines":["var passport = require('passport');","var mongoose = require('mongoose');","var User = mongoose.model('User');"],"id":1}],[{"start":{"row":2,"column":34},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":4,"column":0},"end":{"row":20,"column":2},"action":"insert","lines":["module.exports.register = function(req, res) {","  var user = new User();","","  user.name = req.body.name;","  user.email = req.body.email;","","  user.setPassword(req.body.password);","","  user.save(function(err) {","    var token;","    token = user.generateJwt();","    res.status(200);","    res.json({","      \"token\" : token","    });","  });","};"],"id":4}],[{"start":{"row":20,"column":2},"end":{"row":21,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":21,"column":0},"end":{"row":22,"column":0},"action":"insert","lines":["",""],"id":6}],[{"start":{"row":22,"column":0},"end":{"row":46,"column":2},"action":"insert","lines":["module.exports.login = function(req, res) {","","  passport.authenticate('local', function(err, user, info){","    var token;","","    // If Passport throws/catches an error","    if (err) {","      res.status(404).json(err);","      return;","    }","","    // If a user is found","    if(user){","      token = user.generateJwt();","      res.status(200);","      res.json({","        \"token\" : token","      });","    } else {","      // If user is not found","      res.status(401).json(info);","    }","  })(req, res);","","};"],"id":7}],[{"start":{"row":46,"column":1},"end":{"row":46,"column":2},"action":"insert","lines":["A"],"id":8}],[{"start":{"row":0,"column":0},"end":{"row":46,"column":3},"action":"remove","lines":["var passport = require('passport');","var mongoose = require('mongoose');","var User = mongoose.model('User');","","module.exports.register = function(req, res) {","  var user = new User();","","  user.name = req.body.name;","  user.email = req.body.email;","","  user.setPassword(req.body.password);","","  user.save(function(err) {","    var token;","    token = user.generateJwt();","    res.status(200);","    res.json({","      \"token\" : token","    });","  });","};","","module.exports.login = function(req, res) {","","  passport.authenticate('local', function(err, user, info){","    var token;","","    // If Passport throws/catches an error","    if (err) {","      res.status(404).json(err);","      return;","    }","","    // If a user is found","    if(user){","      token = user.generateJwt();","      res.status(200);","      res.json({","        \"token\" : token","      });","    } else {","      // If user is not found","      res.status(401).json(info);","    }","  })(req, res);","","}A;"],"id":9},{"start":{"row":0,"column":0},"end":{"row":241,"column":0},"action":"insert","lines":["var async = require('async'),","    moment = require('moment'),","    _jsy = require('jsy'),","    hospital = require('./../models/hospital'),","    file = require('./../models/file'),","    appConfig = require('./../../config/app.js'),","    // speciality = require('./../models/speciality'),","    mongoose = require('mongoose'),","    ObjectId = require('mongoose').Types.ObjectId,","    mailer = require('./../models/mailer'),","    userprofile = require('./../models/patient'),","    // procedureMedical = require('./../models/procedureMedical'),","    User = require('./../models/user'),","    usertype = require('./../models/usertype'),","    resetpasswordhash = require('./../models/resetpasswordhash'),","    // medecinController = require('./../controllers/medecinController'),","    factory = require('./../libs/factory'),","    shortid = require('shortid'),","    isEqual = require('lodash.isequal'),","    moment = require('moment'),","    _ = require(\"underscore\");","","","// show all hospitals -- with filter --","module.exports.get_hospitals = function(req, res) {","    console.log(\"get_hospitals*********\")","    var country = req.body.country;","    var speciality = req.body.speciality;","","    console.log('req.body.country')","    console.log(country)","    console.log('req.body.speciality')","    console.log(speciality)","    var query","    var query2","    if ((!country && !speciality) || (country == \"all\" && speciality == \"all\") || (!country && speciality == \"all\") || (!speciality && country == \"all\"))","        query = hospital.find({});","    else if (country && country != \"all\" && (!speciality || speciality == \"all\"))","        query = hospital.find({","            country: mongoose.Types.ObjectId(country)","        })","    else if (speciality && speciality != \"all\" && (!country || country == \"all\")) {","        query = hospital.find({","            'procedureMedical.speciality': mongoose.Types.ObjectId(speciality)","        });","    }","    else {","        query = hospital.find({","            $and: [{","                country: mongoose.Types.ObjectId(country)","            }, {","                'procedureMedical.speciality': mongoose.Types.ObjectId(speciality)","            }]","        })","    }","    if (query) {","        query.populate('city');","        query.populate('country');","        query.populate('procedureMedical');","        query.select().exec(function(err, data) {","            if (err) {","                console.log(\"err\")","                console.log(err)","                res.json({","                    error: true","                })","            }","            else {","                var newdata = [{}]","                if (data.length != 0) {","                    for (var i = 0; i < data.length; i++) {","                        console.log(\"enterereereerererer\")","                        var hosp = data[i].toObject();","                        if (hosp.procedureMedical.length != 0) {","                            var tabmax = []","                            var tabmin = []","                            for (var j = 0; j < hosp.procedureMedical.length; j++) {","                                tabmin[j] = hosp.procedureMedical[j].price_min","                                tabmax[j] = hosp.procedureMedical[j].price_max","                            }","                            var pmin = tabmin[0]","                            var pmax = tabmax[0]","                            for (var k = 0; k < tabmin.length; k++) {","                                if (tabmin[k] <= pmin) {","                                    hosp.procedureMedical._price_min = tabmin[k]","                                }","                            }","                            for (var x = 0; x < tabmax.length; x++) {","                                if (tabmax[x] >= pmax) {","                                    hosp.procedureMedical._price_max = tabmax[x]","                                }","                            }","                            console.log(\" hosp.procedureMedical._price_min\")","                            console.log(hosp.procedureMedical._price_min)","                            console.log(\" hosp.procedureMedical._price_max\")","                            console.log(hosp.procedureMedical._price_max)","                            hosp.braces = hosp.procedureMedical._price_min","                            hosp.crown = hosp.procedureMedical._price_max","                        }","                        newdata[i] = hosp","                    }","                    console.log(\"hosp \" + i + \" ---------------------------------------------------\")","                    console.log(data.length)","                    return res.json({","                        error: false,","                        hospitals: newdata","                    });","                }","                else {","                    return res.json({","                        error: false","                    });","                }","            }","        })","    }","}","// get profil hospital ","module.exports.gethospital = function(req, res) {","    console.log('req.params.id')","    console.log(req.params.id)","","    var data = {};","    var images = {};","    async.series([","        function(next) {","            hospital.findOne({","                _id: req.params.id","            }, function(err, hosp) {","                data = hosp;","                console.log('hospital')","                console.log(data)","                if (!err)","                    next();","                else","                    console.error(err)","            }).populate('country').populate('city').populate('procedureMedical.speciality').populate('procedureMedical.procedure').populate('doctors').populate('services');","        },","        function(next) {","            console.log(\"data\")","            console.log(data)","            file.find({","                user_id: req.params.id","            }, function(err, img) {","                images = img;","                console.log('img')","                console.log(images)","                if (!err)","                    next();","                else","                    console.error(err)","            });","        },","        function(next) {","","            res.render('hospital/profileHospital.ejs', {","                user: req.user,","                hospital: data,","                images: images","            });","","        }","","","","","","    ])","}","module.exports.load = function(req, res) {","","    var data = {};","    async.series([","        function(next) {","","            if (req.user) {","                console.log(\"req.user.type \")","                console.log(req.user.type)","                if (req.user.type == 1) {","                    res.render('patient/inbox.ejs', {","                        user: req.user","                    });","                }","                else if (req.user.type == 0) {","","                    res.render('hospital/inbox.ejs', {","                        user: req.user","                    });","                }","            }","            else","                res.render('guest/index.ejs', {","                    user: req.user","                });","        }","    ]);","","}","// forgot password","module.exports.forgotpasswordPOSTajax = function(req, res) {","","    User.findOne({","        \"local.email\": req.body.email","    }, function(err, user) {","        if (user) {","            console.log(user);","            var hash = shortid.generate();","            resetpasswordhash.create({","                user_id: user._id,","                hash: hash","            }, function(err, _hash) {","                if (err) return handleError(err);","                else","                    console.log(_hash)","                var reset_link = \"http://\" + appConfig.domain + \"/password_reset/\" + hash","                mailer({","                    template: \"lostPassword\",","                    footer: true,","                    to: user.local.email,","                    subject: \"Mots de passe oubli√© - Careways.Co\",","                    vars: {","                        reset_link: reset_link","                    }","                });","","                // saved!","            });","","            res.json({","                error: false","            })","        }","        else {","","            res.json({","                error: true,","                message: \"Email address not found\"","            })","        }","    });","}",""]}]]},"ace":{"folds":[],"scrolltop":3074,"scrollleft":0,"selection":{"start":{"row":230,"column":14},"end":{"row":230,"column":14},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":218,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1483444287595}