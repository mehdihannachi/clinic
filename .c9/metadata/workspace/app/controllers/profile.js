{"changed":true,"filter":false,"title":"profile.js","tooltip":"/app/controllers/profile.js","value":"var async = require('async'),\n  _jsy = require('jsy'),\n  usertype = require('./../models/usertype'),\n  hospital = require('./../models/hospital'),\n  userprofile = require('./../models/patient'),\n  mongoose = require('mongoose'),\n  moment = require('moment');\nvar mailer = require('./../models/mailer');\n\n\nmodule.exports = {\n  loadprofile: function(req, res, next) {\n    var data = {};\n   \n        if (_jsy(req.user).isEmpty())\n          _id = null;\n        else\n          _id = req.user._id\n          \n        var query = usertype.findOne({\n          user_id: _id\n        });\n        \n        query.select().exec(function(err, data) {\n          if(err)\n          {\n            console.log('err')\n            console.log(err)\n          }\n \n          if (data && data.type == 0) {\n            req.user.type = 0;\n            var dquery = hospital.findOne({\n              user_id: mongoose.Types.ObjectId(_id)\n            });\n            dquery.populate('city', 'name long lat');\n            dquery.populate('country', 'name long lat');\n            dquery.select().exec(function(err, data) {\n              req.user.hospital = data;\n              return next();\n            });\n          }\n          else if (data && data.type == 1) {\n            if (!_jsy(req.user).isEmpty())\n              req.user.type = 1;\n\n            var uquery = userprofile.findOne({\n              user_id: mongoose.Types.ObjectId(_id)\n            });\n            uquery.populate('city', 'name long lat');\n            uquery.populate('country', 'name long lat');\n            uquery.select().exec(function(err, data) {\n              req.user.patient = data;\n              return next();\n            });\n          }\n          else {\n            return next();\n          }\n        });\n\n      \n  \n\n  },\n  // route middleware to ensure user is logged in\n  isLoggedIn: function(req, res, next) {\n    if (req.isAuthenticated())\n      return next();\n    req.session.nextURL = req.originalUrl;\n    res.redirect('/login');\n  },\n  // route middleware to ensure user is logged in\n  ajaxisLoggedIn: function(req, res, next) {\n    if (req.isAuthenticated())\n      return next();\n\n    res.json({\n      code: 80,\n      error: 'You must logged in.'\n    });\n  },\n  // route middleware to ensure user is Doctor\n  isPatient: function(req, res, next) {\n    if (req.user) {\n      if (req.user.type == 0) {\n        res.render('error/404.ejs', {\n          user: req.user\n        });\n        console.log(\"404\");\n      }\n      else if (req.user.type == 1) {\n        return next();\n      }\n      else {\n        res.render('error/404.ejs', {\n          user: req.user\n        });\n      }\n    }\n    else {\n      res.render('error/404.ejs', {\n        user: req.user\n      });\n    }\n\n  },\n  // route middleware to ensure user is Patient\n  isHospital: function(req, res, next) {\n    if (req.user) {\n      if (req.user.type == 0) {\n        res.render('error/404.ejs', {\n          user: req.user\n        });\n        console.log(\"404\");\n      }\n      else if (req.user.type == 1) {\n        return next();\n      }\n      else {\n        res.render('error/404.ejs', {\n          user: req.user\n        });\n      }\n    }\n    else {\n      res.render('error/404.ejs', {\n        user: req.user\n      });\n    }\n\n  },\n  // route middleware to ensure user is logged in\n  isNotLoggedIn: function(req, res, next) {\n    if (!req.isAuthenticated())\n      return next();\n\n    res.redirect('/');\n  }\n  \n  \n  \n}\n\n","undoManager":{"mark":2,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":19,"column":2},"action":"insert","lines":["var mongoose = require('mongoose');","var User = mongoose.model('User');","","module.exports.profileRead = function(req, res) {","","  // If no user ID exists in the JWT return a 401","  if (!req.payload._id) {","    res.status(401).json({","      \"message\" : \"UnauthorizedError: private profile\"","    });","  } else {","    // Otherwise continue","    User","      .findById(req.payload._id)","      .exec(function(err, user) {","        res.status(200).json(user);","      });","  }","","};"],"id":1}],[{"start":{"row":19,"column":2},"end":{"row":19,"column":34},"action":"insert","lines":["mongod --bind_ip=$IP --nojournal"],"id":2}],[{"start":{"row":19,"column":2},"end":{"row":19,"column":34},"action":"remove","lines":["mongod --bind_ip=$IP --nojournal"],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":19,"column":2},"action":"remove","lines":["var mongoose = require('mongoose');","var User = mongoose.model('User');","","module.exports.profileRead = function(req, res) {","","  // If no user ID exists in the JWT return a 401","  if (!req.payload._id) {","    res.status(401).json({","      \"message\" : \"UnauthorizedError: private profile\"","    });","  } else {","    // Otherwise continue","    User","      .findById(req.payload._id)","      .exec(function(err, user) {","        res.status(200).json(user);","      });","  }","","};"],"id":4},{"start":{"row":0,"column":0},"end":{"row":144,"column":0},"action":"insert","lines":["var async = require('async'),","  _jsy = require('jsy'),","  usertype = require('./../models/usertype'),","  hospital = require('./../models/hospital'),","  userprofile = require('./../models/patient'),","  mongoose = require('mongoose'),","  moment = require('moment');","var mailer = require('./../models/mailer');","","","module.exports = {","  loadprofile: function(req, res, next) {","    var data = {};","   ","        if (_jsy(req.user).isEmpty())","          _id = null;","        else","          _id = req.user._id","          ","        var query = usertype.findOne({","          user_id: _id","        });","        ","        query.select().exec(function(err, data) {","          if(err)","          {","            console.log('err')","            console.log(err)","          }"," ","          if (data && data.type == 0) {","            req.user.type = 0;","            var dquery = hospital.findOne({","              user_id: mongoose.Types.ObjectId(_id)","            });","            dquery.populate('city', 'name long lat');","            dquery.populate('country', 'name long lat');","            dquery.select().exec(function(err, data) {","              req.user.hospital = data;","              return next();","            });","          }","          else if (data && data.type == 1) {","            if (!_jsy(req.user).isEmpty())","              req.user.type = 1;","","            var uquery = userprofile.findOne({","              user_id: mongoose.Types.ObjectId(_id)","            });","            uquery.populate('city', 'name long lat');","            uquery.populate('country', 'name long lat');","            uquery.select().exec(function(err, data) {","              req.user.patient = data;","              return next();","            });","          }","          else {","            return next();","          }","        });","","      ","  ","","  },","  // route middleware to ensure user is logged in","  isLoggedIn: function(req, res, next) {","    if (req.isAuthenticated())","      return next();","    req.session.nextURL = req.originalUrl;","    res.redirect('/login');","  },","  // route middleware to ensure user is logged in","  ajaxisLoggedIn: function(req, res, next) {","    if (req.isAuthenticated())","      return next();","","    res.json({","      code: 80,","      error: 'You must logged in.'","    });","  },","  // route middleware to ensure user is Doctor","  isPatient: function(req, res, next) {","    if (req.user) {","      if (req.user.type == 0) {","        res.render('error/404.ejs', {","          user: req.user","        });","        console.log(\"404\");","      }","      else if (req.user.type == 1) {","        return next();","      }","      else {","        res.render('error/404.ejs', {","          user: req.user","        });","      }","    }","    else {","      res.render('error/404.ejs', {","        user: req.user","      });","    }","","  },","  // route middleware to ensure user is Patient","  isHospital: function(req, res, next) {","    if (req.user) {","      if (req.user.type == 0) {","        res.render('error/404.ejs', {","          user: req.user","        });","        console.log(\"404\");","      }","      else if (req.user.type == 1) {","        return next();","      }","      else {","        res.render('error/404.ejs', {","          user: req.user","        });","      }","    }","    else {","      res.render('error/404.ejs', {","        user: req.user","      });","    }","","  },","  // route middleware to ensure user is logged in","  isNotLoggedIn: function(req, res, next) {","    if (!req.isAuthenticated())","      return next();","","    res.redirect('/');","  }","  ","  ","  ","}","",""]}]]},"ace":{"folds":[],"scrolltop":1716,"scrollleft":0,"selection":{"start":{"row":144,"column":0},"end":{"row":144,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":121,"state":"no_regex","mode":"ace/mode/javascript"}},"timestamp":1483451990442}